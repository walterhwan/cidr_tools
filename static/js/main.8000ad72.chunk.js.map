{"version":3,"sources":["helper.js","netmask46.js","DataTable.js","BinaryExplained.js","App.js","serviceWorker.js","index.js"],"names":["BIGINT_0","BigInt","BIGINT_1","longToIp","long","join","bigintToIpv6","bigint","ipv6Arr","i","shift","push","map","decimal","toString","ipTolong","ip","b","split","length","Error","byte","isNaN","parseInt","ipv6ToBigint","ipv6","hexgroup","temp","forEach","group","idx","printBigObj","pojo","newPojo","Object","entries","key","val","BigIntPow","base","exp","unShortenIpv6","shortenedIpv6","ipArr","left","right","leftIpArr","rightIpArr","hexGroupToAdd","Array","fill","filter","hex","require","Netmask4","netmask","this","bitmask","maskLong","netLong","err","cidr","size","Math","pow","hostmask","first","last","indexOf","contains","count","fn","lastLong","index","BIGINT_128","Netmask6","test","maskBigInt","Number","netBigInt","_size","DataTable","data","className","BinaryExplained","binaryData","reIpv4mapped","decimalToBinary","dec","padStart","ipv4ToBinary","decimalToHex","isExactIpv6","string","ipRegex","v6","exact","App","React","useState","inputBox","setInputBox","setCidr","errorText","setErrorText","isIpv6","setIsIpv6","ipVersion","setIpVersion","timer","setTimer","errorCallBack","block","errorMessage","version","message","res","ipRangeData","cidrToDisplay","autoFocus","type","value","onChange","event","target","_ip","v4","match","ivp4","arr","ipv4ToIpv4mappedIpv6Hex","isExactIpv4","re","clearTimeout","setTimeout","newCidr","replace","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.8000ad72.chunk.js","sourcesContent":["/* global BigInt */\n\nconst BIGINT_0 = BigInt(0)\nconst BIGINT_1 = BigInt(1)\n\nexport const longToIp = (long) => {\n  const a = (long & (0xff << 24)) >>> 24\n  const b = (long & (0xff << 16)) >>> 16\n  const c = (long & (0xff << 8)) >>> 8\n  const d = long & 0xff\n  return [a, b, c, d].join('.')\n}\n\nexport const bigintToIpv6 = (bigint) => {\n  const ipv6Arr = []\n  for (let i = BIGINT_0; i < BigInt(8); i++) {\n    const shift = BigInt(112) - (BigInt(16) * i)\n    ipv6Arr.push((bigint & (BigInt('0xffff') << shift)) >> shift)\n  }\n\n  return ipv6Arr.map((decimal) => decimal.toString(16)).join(':')\n}\n\nexport const ipTolong = (ip) => {\n  const b = ip.split('.')\n  if (b.length === 0 || b.length > 4) {\n    throw new Error('Invalid IP')\n  }\n  for (let i = 0; i < b.length; i++) {\n    const byte = b[i]\n    if (isNaN(parseInt(byte, 10))) {\n      throw new Error(`Invalid byte: ${byte}`)\n    }\n    if (byte < 0 || byte > 255) {\n      throw new Error(`Invalid byte: ${byte}`)\n    }\n  }\n  return ((b[0] << 24) | (b[1] << 16) | (b[2] << 8) | b[3]) >>> 0\n}\n\nexport const ipv6ToBigint = (ipv6) => {\n  const arr = ipv6.split(':')\n  if (arr.length !== 8) {\n    throw new Error(`Invalid IPv6: ${ipv6}`)\n  }\n\n  const ipv6Arr = ipv6.split(':')\n    .map((hexgroup) => {\n      const decimal = parseInt(hexgroup, 16)\n      if (isNaN(decimal)) throw new Error(`Invalid hexgroup: ${hexgroup}`)\n      if (decimal < 0 || decimal > 65535) throw new Error(`Invalid hexgroup: ${hexgroup}`)\n      return BigInt(decimal)\n    })\n  let temp = BIGINT_0\n  ipv6Arr.forEach((group, idx) => {\n    const shift = BigInt(112) - (BigInt(16) * BigInt(idx))\n    temp |= (group << shift)\n  })\n  return temp >> BIGINT_0\n}\n\nexport const printBigObj = (pojo) => {\n  const newPojo = {}\n  Object.entries(pojo).forEach(([key, val]) => {\n    if (typeof val === \"bigint\") newPojo[key] = val.toString()\n    else newPojo[key] = val\n  })\n\n  return newPojo\n}\n\nexport const BigIntPow = (base, exp) => {\n  if (exp === BIGINT_0) {\n    return BIGINT_1\n  } else if (exp === BIGINT_1) {\n    return base\n  } else if (exp < BIGINT_0) {\n    return BIGINT_1 / BigIntPow(base, -exp)\n  }\n\n  return BigIntPow(base, exp - BIGINT_1) * BigIntPow(base, BIGINT_1)\n}\n\nexport const unShortenIpv6 = (shortenedIpv6) => {\n  const ipArr = shortenedIpv6.split('::')\n  if (ipArr.length > 2) {\n    throw new Error(`Invalid ipv6 address: ${shortenedIpv6}`)\n  } else if (ipArr.length === 1) {\n    return shortenedIpv6\n  }\n  const [left, right] = ipArr\n  const leftIpArr = left.split(':')\n  const rightIpArr = right.split(':')\n  const leftLength = left ? leftIpArr.length : 0\n  const rightLength = right ? rightIpArr.length : 0\n  const hexGroupToAdd = 8 - leftLength - rightLength\n  const ipv6Arr = [...leftIpArr, ...Array(hexGroupToAdd).fill('0'), ...rightIpArr]\n\n  return ipv6Arr.filter((hex) => hex !== '').join(':')\n}\n","/* global BigInt */\n\nconst {\n  longToIp,\n  ipTolong,\n  bigintToIpv6,\n  ipv6ToBigint,\n  unShortenIpv6,\n  BigIntPow,\n} = require('./helper')\n\nexport class Netmask4 {\n  // input can be new Netmask4('10.0.0.1/32') or Netmask4('10.0.0.1', '32')\n  constructor(ip, netmask) {\n    if (typeof ip !== 'string') {\n      throw new Error('Missing ip')\n    }\n    if (!netmask) {\n      [ip, netmask] = ip.split('/', 2)\n    }\n    if (!netmask) {\n      throw new Error(`Invalid ip address: ${ip}`)\n    }\n\n    if (netmask) {\n      this.bitmask = parseInt(netmask, 10)\n      this.maskLong = 0\n      if (this.bitmask > 0) {\n        this.maskLong = (0xffffffff << (32 - this.bitmask)) >>> 0\n      }\n    } else {\n      throw new Error('Invalid netmask: empty')\n    }\n    \n    if (isNaN(this.bitmask) || this.bitmask > 32 || this.bitmask < 0) {\n      throw new Error(`Invalid netmask: ${netmask}`)\n    }\n\n    try {\n      this.netLong = (ipTolong(ip) & this.maskLong) >>> 0\n    } catch (err) {\n      throw new Error(`Invalid ip address: ${ip}`)\n    }\n\n    this.ip = ip\n    this.cidr = `${ip}/${this.bitmask}`\n    this.size = Math.pow(2, 32 - this.bitmask)\n    this.netmask = longToIp(this.maskLong)\n\n    // The host netmask, the opposite of the netmask (eg.: 0.0.0.255)\n    this.hostmask = longToIp(~this.maskLong)\n\n    this.first = longToIp(this.netLong)\n    this.last = longToIp(this.netLong + this.size - 1)\n  }\n\n  contains(ip) {\n    if (\n      typeof ip === 'string' &&\n      (ip.indexOf('/') > 0 || ip.split('.').length !== 4)\n    ) {\n      ip = new Netmask4(ip)\n    }\n\n    if (ip instanceof Netmask4) {\n      return this.contains(ip.base) && this.contains(ip.last)\n    } else {\n      return (\n        (ipTolong(ip) & this.maskLong) >>> 0 ===\n        (this.netLong & this.maskLong) >>> 0\n      )\n    }\n  }\n\n  next(count) {\n    if (count == null) {\n      count = 1\n    }\n    return new Netmask4(\n      longToIp(this.netLong + this.size * count),\n      this.bitmask\n    )\n  }\n\n  forEach(fn) {\n    let long = ipTolong(this.first)\n    const lastLong = ipTolong(this.last)\n    let index = 0\n    while (long <= lastLong) {\n      fn(longToIp(long), long, index)\n      index++\n      long++\n    }\n  }\n\n  toString() {\n    return this.first + '/' + this.bitmask\n  }\n}\n\nconst IPV6_MASK = '0xffffffffffffffffffffffffffffffff'\nconst BIGINT_0 = BigInt(0)\nconst BIGINT_128 = BigInt(128)\nexport class Netmask6 {\n  constructor(ipv6, netmask) {\n    if (typeof ipv6 !== 'string') {\n      throw new Error('Missing ip')\n    }\n    if (!netmask) {\n      [ipv6, netmask] = ipv6.split('/', 2)\n    }\n    this.ipv6 = unShortenIpv6(ipv6)\n    \n    if (!netmask || /[^0-9/]/.test(netmask)) {\n      throw new Error(`Invalid netmask: ${netmask}`)\n    } else {\n      this.bitmask = BigInt(parseInt(netmask, 10))\n      this.maskBigInt = BIGINT_0\n      if (this.bitmask > BIGINT_0) {\n        this.maskBigInt = (BigInt(IPV6_MASK) << (BIGINT_128 - this.bitmask)) >> BIGINT_0\n      }\n    }\n\n    if (isNaN(Number(this.bitmask)) || this.bitmask > BIGINT_128 || this.bitmask < BIGINT_0) {\n      throw new Error(`Invalid netmask: ${netmask}`)\n    }\n\n    try {\n      this.netBigInt = (ipv6ToBigint(this.ipv6) & this.maskBigInt) >> BIGINT_0\n    } catch (err) {\n      throw new Error(`Invalid ipv6 address: ${this.ipv6}`)\n    }\n\n    this.cidr = `${this.ipv6}/${netmask}`\n    this._size = BigIntPow(BigInt(2), BIGINT_128 - this.bitmask)\n    this.netmask = bigintToIpv6(this.maskBigInt)\n\n    this.hostmask = bigintToIpv6(~this.maskBigInt)\n\n    this.first = bigintToIpv6(this.netBigInt)\n    this.last = bigintToIpv6(this.netBigInt + this._size - BigInt(1))\n  }\n\n  get size() {\n    return this._size.toString()\n  }\n  set size(val) {\n    this._size = val\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport default function DataTable({ data = {} }) {\n  return (\n    <div className=\"cidr-output\">\n      {Object.entries(data).map(([key, val]) => (\n        <div className=\"output-row\" key={key}>\n          <div className=\"output-left\">{`${key}:`}</div>\n          <div className=\"output-right\">{val}</div>\n        </div>\n      ))}\n    </div>\n  )\n}\nDataTable.propTypes = {\n  data: PropTypes.object,\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport DataTable from './DataTable'\n\n\nexport default function BinaryExplained({ binaryData = {} }) {\n  return (\n    <>\n      <div className=\"title\">\n        <p>In Binary</p>\n      </div>\n      <DataTable data={binaryData}/>\n      <div className=\"cidr-output\">\n        <p>{'<Base IP> BITWISE AND <Net Mask> = <First IP>'}</p>\n        <p>{'<First IP> BITWISE OR <Host Mask> = <Last IP>'}</p>\n      </div>\n    </>\n  )\n}\nBinaryExplained.propTypes = {\n  binaryData: PropTypes.object,\n}","import React from 'react'\nimport ipRegex from 'ip-regex'\n\nimport { Netmask4, Netmask6 } from './netmask46'\nimport DataTable from './DataTable'\nimport BinaryExplained from './BinaryExplained'\n\nimport './App.css'\n\nconst DEFAULT_CIDR = '192.168.0.5/31'\nconst reIpv4mapped = /(?<=^::ffff:)((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])$/\n\nfunction decimalToBinary(dec) {\n  return Number(dec)\n    .toString(2)\n    .padStart(8, '0')\n}\n\nfunction ipv4ToBinary(ip) {\n  return ip\n    .split('.')\n    .map(decimalToBinary)\n    .join(' ')\n}\n\nconst decimalToHex = (decimal) => {\n  return parseInt(decimal, 10).toString(16)\n}\n\nconst ipv4ToIpv4mappedIpv6Hex = (ivp4) => {\n  const arr =  ivp4.split('.').map(decimalToHex)\n  return `::ffff:${arr[0] + arr[1]}:${arr[2] + arr[3]}`\n}\n\nconst isExactIpv6 = (string) => \n  ipRegex.v6({ exact: true }).test(string)\n\nconst isExactIpv4 = (string) => \n  ipRegex.v4({ exact: true }).test(string)\n\nconst isExactIpv4mapped = (string) => {\n  return reIpv4mapped.test(string)\n}\n\nfunction cidrToDisplay(cidr, errorCallBack) {\n  if (!cidr) return {}\n  let block\n  let errorMessage\n  let version\n  const [ip, bitmask] = cidr.split('/')\n  if (cidr && bitmask) {\n    try {\n      if (isExactIpv6(ip)) {\n        block = new Netmask6(cidr)\n      } else {\n        block = new Netmask4(cidr)\n        version = 4\n      }\n    } catch (err) {\n      errorMessage = err.message\n      errorCallBack(err)\n    }\n  }\n  if (block) {\n    const res = {\n      ipRangeData: {\n        'CIDR Range': block.cidr,\n        'Net Mask': block.netmask,\n        'Host Mask': block.hostmask,\n        'First IP': block.first,\n        'Last IP': block.last,\n        'Total Hosts': block.size,\n      },\n    }\n    if (version === 4) {\n      res.binaryData = {\n        'Base IP': ipv4ToBinary(block.ip),\n        'Net Mask': ipv4ToBinary(block.netmask),\n        'First IP': ipv4ToBinary(block.first),\n        'Host Mask': ipv4ToBinary(block.hostmask),\n        'Last IP': ipv4ToBinary(block.last),\n      }\n    }\n    return res\n  }\n  return {\n    ipRangeData: {},\n    binaryData: {},\n    errorMessage,\n  }\n}\n\nfunction App() {\n  const [inputBox, setInputBox] = React.useState(DEFAULT_CIDR)\n  const [cidr, setCidr] = React.useState(inputBox)\n  const [errorText, setErrorText] = React.useState('')\n  const [isIpv6, setIsIpv6] = React.useState(isExactIpv6(DEFAULT_CIDR))\n  const [ipVersion, setIpVersion] = React.useState('IPv4')\n  const [timer, setTimer] = React.useState()\n  \n  const handleChange = (event) => {\n    const value = event.target.value\n    const [_ip, bitmask] = value.split('/')\n    let ip = _ip\n\n    // deal with ipv4 mapped ipv6\n    if (isExactIpv4mapped(ip)) {\n      const v4 = ip.match(reIpv4mapped)[0]\n      ip = ipv4ToIpv4mappedIpv6Hex(v4)\n      setIpVersion('IPv4-Mapped IPv6')\n      setIsIpv6(true)\n      setCidr(`${ip}/${bitmask || ''}`)\n    } else if (isExactIpv6(ip)) {\n      setCidr(`${ip}/${bitmask || ''}`)\n      setIpVersion('IPv6')\n      setIsIpv6(true)\n    } else if (isExactIpv4(ip)) {\n      setCidr(`${ip}/${bitmask || ''}`)\n      setIpVersion('IPv4')\n      setIsIpv6(false)\n    } else {\n      setIpVersion()\n      setCidr()\n    }\n\n    setInputBox(value)\n    setErrorText('')\n    \n    // purge not allowed charactors\n    const re = /[^/0-9a-fA-F:.]|(?<=\\.)\\.+|(?<=::):+/gm\n    clearTimeout(timer)\n    setTimer(setTimeout(() => {\n      const newCidr = value.replace(re, '')\n      setInputBox(newCidr)\n    }, 2000))\n  }\n\n  const handleError = (err) => {\n    setCidr()\n    setErrorText(err.message)\n  }\n\n  const { ipRangeData, binaryData } = cidrToDisplay(cidr, handleError)\n\n  return (\n    <div className=\"App\">\n      {/* Title */}\n      <div className=\"title\">\n        <p>CIDR To IP Range</p>\n      </div>\n      {/* IP Input */}\n      <input\n        className=\"cidr-input\"\n        autoFocus\n        type=\"text\"\n        value={inputBox}\n        onChange={handleChange}\n      />\n      {ipVersion && <p>{`Detected IP version: ${ipVersion}`}</p>}\n      {/* Data/Error */}\n      {!cidr ? (\n        <div className=\"cidr-error\">\n          <p>{errorText}</p>\n        </div>\n      ) : (\n        <>\n          <DataTable isIpv6 data={ipRangeData} />\n          {!isIpv6 && <BinaryExplained {...{ binaryData }} />}\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}